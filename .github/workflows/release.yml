name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tags
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Install ZSH
      run: |
        sudo apt-get update
        sudo apt-get install -y zsh
      shell: bash
        
    - name: Run tests
      run: mvn clean test
      shell: zsh {0}
    
    - name: Build JAR with dependencies
      run: mvn clean package
      shell: zsh {0}
    
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      shell: zsh {0}
    
    - name: Get previous tag
      id: previous_tag
      run: |
        # Get all tags sorted by version
        CURRENT_TAG="${GITHUB_REF#refs/tags/}"
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "^$CURRENT_TAG$" | head -1)
        
        if [ -z "$PREVIOUS_TAG" ]; then
          # If no previous tag, use first commit
          PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          echo "No previous tag found, using first commit: $PREVIOUS_TAG"
        else
          echo "Previous tag found: $PREVIOUS_TAG"
        fi
        
        echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Generate changelog
      id: changelog
      run: |
        CURRENT_TAG="${{ steps.get_version.outputs.VERSION }}"
        PREVIOUS_TAG="${{ steps.previous_tag.outputs.PREVIOUS_TAG }}"
        
        echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG"
        
        # Generate changelog with proper formatting
        if git rev-parse --verify "$PREVIOUS_TAG" >/dev/null 2>&1; then
          # If previous tag exists, get commits between tags
          CHANGELOG=$(git log --pretty=format:"- %s" "$PREVIOUS_TAG..$CURRENT_TAG" | head -20)
        else
          # If previous tag doesn't exist (first commit), get all commits up to current tag
          CHANGELOG=$(git log --pretty=format:"- %s" "$CURRENT_TAG" | head -20)
        fi
        
        # If no commits found, provide default message
        if [ -z "$CHANGELOG" ]; then
          CHANGELOG="- Initial release"
        fi
        
        echo "Generated changelog:"
        echo "$CHANGELOG"
        
        # Save to multiline output
        {
          echo 'CHANGELOG<<EOF'
          echo "$CHANGELOG"
          echo 'EOF'
        } >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## Changes in this Release
          
          ${{ steps.changelog.outputs.CHANGELOG }}

          ## Download
          - **private-blockchain-${{ steps.get_version.outputs.VERSION }}.jar**: Standard JAR (requires dependencies)
          - **private-blockchain-${{ steps.get_version.outputs.VERSION }}-jar-with-dependencies.jar**: Executable JAR with all dependencies included
          
          ## Usage
          ```bash
          #!/usr/bin/env zsh
          
          java -jar private-blockchain-${{ steps.get_version.outputs.VERSION }}-jar-with-dependencies.jar
          ```
        files: |
          target/private-blockchain-*.jar
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}